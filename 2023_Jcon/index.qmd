---
title: "Synthetic Eddy Method"
subtitle: "New Julia package for eddy generation"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    css: styles.css
    footer: <https://github.com/carlodev/SyntheticEddyMethod.jl>
    logo: images/logos/logo_20.svg
    reference-location: margin
jupyter: julia-1.8
execute:
  echo: true
bibliography: references.bib
title-slide-attributes:
  data-background-image: images/logos/logo.png
  data-background-size: 15%
  data-background-position: 50% 75%
---

## Who
Carlo Brunelli, PhD Student at RMA

![](/images/Brunelli_Carlo_ph.jpg){width=20%}

![](/images/logos/RMA_nobg.png){width=10%}

<!-- ::: {.notes}
Hello everyone, it is a pleasure to be at JuliaCon.
Welcome to the presentation of a new Julia pakcage: SyntheticEddyMethod, in which I have been working on the last months
::: -->

## Why SyntheticEddyMethod?

::: {.incremental}
- A Julia Package
- Realistic turbulent fluctuations for fluid dynamic simulations
- Prediction of transition
- One of the major method beside precursor simulator and databases.
:::


::: {.notes}
In the field of fluid mechanics for high fidelity simulations, has arisen the need of creating turbulent intial initial or inlet conditions. For example when simulating the flow in a pipe, or over an airfoil, the flow can be strongly dependent on the boundary conditions. The SEM package aims to be used to recreate numerically realistic eddys.
:::

## Features
::: {.incremental}
- Creation of Synthetic Eddies, @Jarrin2006
- Chose between different shape functions
- Impose the Reynolds stress (globally or locally) / Turbulence Intensity
- Divergence-free constraint, @Poletto2013
- It can be coupled with a fludid dynamic code solver, or used stand-alone and save the produced results which can be then read by the code.
:::

::: {.notes}
At the moment, it has implemented the basic method of creating synthetic eddy established by Jarrin. It allows the user to chose between different shape functions (gaussian, tent or step).
The user can impose a Renolds stress tensor that aims to recreate. It is also possible to import a spreasheet where different stress tensor are defined in different points of the domain (for example for a wall-bounded-flow). 
Furtheremore, it is possible to create fluctuations which are divergence free, fundamental for having more realistic eddyis for incompressible flows.
At the end, more a suggestion of usage, it can be coupled
:::

## Synthetic Eddy Method Foundation

``` {=tex}
\begin{equation}
    \vec{u}(\vec{x},t) = \vec{U}(\vec{x},t) +  \vec{u'}(\vec{x},t)
\end{equation}
```

Creation of random located eddies, with prescribed dimension and random intensity (-1 or 1). At each time step they are convected $U_x\cdot dt$.

Virtual Box: space where the eddies are created and covected.
When one eddy exits the box, it is automatically recreated on the the other side at random location.

::: {.notes}
The SEM aims to recreate fluctuations which can be added to a mean velocity profile. The idea is to put the inlet plane in a virtual box, where eddies are randomly generated and convected. 
:::



## Usage
Virtual Box Creation
```{julia}
using SyntheticEddyMethod
σ = 0.1
b = 5.0
a = 0.0
y = collect(a:0.1:b)
z = collect(a:0.1:b)
Vboxinfo = VirtualBox(y,z,σ)
```

The Eddy creation is based on the use of shape function: tent, step or gaussian.

::: {.notes}
But let's see how to use it. The user has to define sigma, the Eddis dimension, and the size of the inlet plane. You may notice that in the $x$ direction the extension is from -sigma to +sigma.
The VirtualBox is created. As you may notice, the default shape function is the tent function. It is also possible to specify 3 different size of eddy along the 3 axes. 
:::



##

![Eddies' centre location in the Virtual Box](/images/Eddy_position.png){width=80%}

::: {.notes}
Each Eddy has a centre, here is the representation of some of them.
:::

## Usage
Providing the Reynolds stress tensor, eddy dimension, and the size of the domain.
```{julia}
dt = 0.001
U₀ = 1.0
TI = 0.01 #turbulence intensity

Re_stress, Eddies = initialize_eddies(U₀, TI, Vboxinfo)
Eddies[1]
```

::: {.notes}
The user provide the velocity in the x direction, and one of the possibility is to provide the turbulence intensity.
The new abstract Type Eddy has been introduces, and SemEddy is a concrete type. Each eddy has a centre or location, which is updated (the x coordinate) when the fluctuations are evaluated at a nex time step. They can contribute reducing or increasing the velocity, thats the meaning f epsilon.
:::



## Usage
```{julia}
point = [0.0, 1.0, 2.5];
```


Compute the velocity fluctuation.
```{julia}
u_fluct = compute_fluct(point, dt, Eddies, U₀, Vboxinfo, Re_stress)
```

::: {.notes}
We fix a point on the inlet plane, where we want to get the fluctuation.
And finally we get the fluctutation.
:::

## Validation
Statistical validation

::: {.r-stack}
::: {.fragment .fade-in-then-out}
![Turbulent spectra](/images/Spectra.png){width=130%}
:::

::: {.fragment .fade-in-then-out}
Mean value of the fluctuations is zero

![v' cumulated mean](/images/SEM_mean1.png){height=50%}
:::
::: {.fragment .fade-in-then-out}
Autocorrelation properties

![](/images/autocorr.png){width=70%}
:::
::: {.fragment .fade-in-then-out}
Ability to create a quasi non-zero divergence free flow.

``` {=tex}
\begin{equation}
   \dfrac{\nabla\cdot \vec{u}}{|\nabla \vec{u}|}
\end{equation}
```

![normalized divergence](/images/Div_free_plane.png){width="800"}
:::

::: {.fragment .fade-in-then-out}
Standard deviation of the fluctuation is the prescribed turbulence intensity
:::
:::

::: {.notes}
The features of the package have been statistically validated. It creates a turbulent spectra, with the decay in the sub inertial reagion close to the well know -5/3 trend. Here we can see that the effort has produced the expected results, expecially in comparison with the random fluctuation which spectra is not realistic.
The mean value of the fluctuation converge towards zero.
It has good autocorrelation properties.
It has the ability to created a flow divergence free almost everywhere, and the standard deviation is the given turbulence intensity.
:::


## Examples
![Isovelocity contour of fluctuations, as initial condition for a turbulent channel](/images/Isovel.png){width=100%}

## Conclusions
::: {.notes}
 In conclusion, I hope this package can be another tool for researchers and engineers in the field of fluid dynamics for obtaining better and better simulations. It can be directly coupled with some CFD code for creating suitable boundary conditions, or previously run, save and re-load the results in the simulation.
:::


## References
